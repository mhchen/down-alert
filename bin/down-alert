#!/usr/bin/env node

const program = require('commander');
const cron = require('node-cron');
const request = require('request-promise-native');
const inquirer = require('inquirer');

require('colors');

const mailer = require('../mailer');
const { createLogger } = require('../logger');

const DEFAULT_CRON_FORMAT = '0 0 * * * *';

const ensureRequiredOptions = (options) => {
  const { SENDGRID_API_KEY } = process.env;
  const { to, from } = options;
  const errors = [];
  if (!to) {
    errors.push('Missing --to option');
  }
  if (!from) {
    errors.push('Missing --from option');
  }
  if (!SENDGRID_API_KEY) {
    errors.push('Missing env variable SENDGRID_API_KEY');
  }
  if (errors.length) {
    errors.forEach(error => console.error(error));
    program.help();
    process.exit(-1);
  }
};

program
  .option('-c, --cron-format <cron>', 'Cron format (e.g. "* * * * *") of frequency to poll. Defaults to 0 0 * * * * (hourly)')
  .option('-t, --to <to>', 'Email address to send alerts to')
  .option('-f, --from <from>', 'Email address to send alerts from')
  .option('-lf, --log-file <filename>', 'File to write logs messages to')
  .option('-ll, --log-level <level>', 'Log level (e.g. debug, info, error)')
  .option('-y, --yes', 'Skip confirmation prompt')
  .option('--send-test-email', 'Sends a test email to verify your email credentials')
  .usage('<url ...> [options]')
  .action(async (...args) => {
    const options = args.pop();
    const urls = args;
    const { to, from, cronFormat = DEFAULT_CRON_FORMAT } = options;

    ensureRequiredOptions(options);

    const logger = createLogger(options);
    const poll = () => {
      logger.info('Polling all sites');
      urls.forEach((url) => {
        request({
          method: 'HEAD',
          uri: url,
          resolveWithFullResponse: true,
        }).then(({ statusCode }) => {
          logger.info(`${url}: ${statusCode}`);
          if (statusCode < 200 || statusCode >= 300) {
            throw new Error(`Non-200 statusCode received from ${url}: ${statusCode}`);
          }
        }).catch((err) => {
          logger.error(`${url} request unsuccessful, sending error alert`);
          mailer.sendDownAlert(to, from, url, err.message);
        });
      });
    };

    if (!options.yes) {
      const confirmMessage = `To: ${to.cyan}
  From: ${from.cyan}
  URLs: ${urls.join(',').cyan}
  Cron format: ${cronFormat.cyan}
  Test email: ${(options.sendTestEmail ? 'Yes' : 'No').cyan}`;
      console.log(confirmMessage);
      const { confirm } = await inquirer.prompt({
        type: 'confirm',
        name: 'confirm',
        message: 'Start polling with this information?',
      });
      if (!confirm) {
        return;
      }
    }

    if (options.sendTestEmail) {
      logger.info('Sending test email');
      await mailer.sendTestEmail(to, from, urls);
    }

    poll();
    cron.schedule(cronFormat, poll);
  })
  .parse(process.argv);

if (!program.args.length) {
  program.help();
}
